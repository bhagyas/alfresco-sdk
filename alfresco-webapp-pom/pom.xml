<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.alfresco.maven</groupId>
		<artifactId>alfresco-super-pom</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<groupId>org.alfresco.maven</groupId>
	<artifactId>alfresco-webapp-pom</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>Alfresco web application POM</name>
	<description>POM for Alfresco web application configuration.</description>

	<!-- 
		@author		Stijn de Reede
		Heavily based on the alfresco archetypes, http://code.google.com/p/maven-alfresco-archetypes/.
	 -->
	
	<!-- 
		TODO:
		* strip unused stuff (jboss container)
		* externalize embedded jetty properties (to settings or local svn:ignored .properties file)
		* clean up properties (move properties used for embedded run only to a profile)
		* document how to use this pom's children (what mvn command can be used, etc)
	
	 	Usage:
	 	`mvn package`
	 		Creates a WAR file. The `clean` goal is optional, normally Maven should pick up on changes and recompile if required. 
	 		Newer snapshot versions AMP dependencies should also be picked up without clean. The WAR file is created by starting 
	 		with the Alfresco WAR file, and copying this web app and AMP dependencies into it.
	 	
	 	`mvn -Ptomcat-deploy`
	 		When called without any Maven goals on the command line, the default goals will be `clean package cargo:deploy`.
	 		Deploys the WAR file to the local or remote Tomcat server using the Tomcat admin script interface. Other cargo goals 
	 		are also valid, like `undeploy` and `redeploy`. 
			The version the installed Tomcat server defaults to 6x, but can be overridden by setting the cargo.remote.tomcat.containerId 
	 		property with a activeByDefault profile in your Maven settings.xml. Tomcat credentials are taken from the server with ID 
	 		remote-tomcat in your settings.xml
	 	
	 	`mvn -Ptomcat-inject`
	 		When called without any Maven goals on the command line, the default goals will be `clean prepare-package cargo:deploy`.
	 		Prepares the WAR package of this webapp (i.e. without the Alfresco WAR), and copies this directory on top of the Alfresco
	 		wep app in the local Tomcat server. The CATALINA_HOME environment variable needs to point to your Tomcat
	 		installation. You need to have a running Alfresco web app in you Tomcat server, since this goal only packages the
	 		customizations and not the Alfresco web app itself.
	 		The version the installed Tomcat server defaults to 6x, but can be overridden by setting the cargo.installed.tomcat.containerId 
	 		property with a activeByDefault profile in your Maven settings.xml. Tomcat credentials are taken from the server with ID 
	 		installed-tomcat in your settings.xml
	 	
	 	`mvn -Pjetty-embedded`
	 		When called without any Maven goals on the command line, the default goals will be `clean prepare-package jetty:run`.
	 		Runs the WAR file in an embedded Jetty (or Tomcat?) server. Hit <enter> to reload the web app.
	 		Use the extra `initialize` profile when running for the first time, this cleans up the Alfresco data location 
	 		(see the alfresco.data.location property). Also be sure to have a local clean database when running for the first time, 
	 		and keep the data location and database in sync (start clean by clearing the database and running the `initialize` goal). 
	 		The database connection details can be set with the alfresco.db.* properties.
	 
	 		Useful documentation online:
		- http://wiki.alfresco.com/wiki/Managing_Alfresco_Lifecyle_with_Maven
		- http://maven.alfresco.com/nexus/content/repositories/alfresco-docs/maven-alfresco-lifecycle/maven-alfresco-archetypes/maven-alfresco-extension-archetype/index.html
	 
	  -->
	
	<!-- 
		Need to overwrite the parent connection, as Maven automatically adds ${artifactId}, http://jira.codehaus.org/browse/MNG-4508, 
		http://jira.codehaus.org/browse/MNG-4670 
	-->
	<scm>
		<connection>scm:svn:${svn.server.url}/trunk/${project.artifactId}/</connection>
		<developerConnection>scm:svn:${svn.server.url}/trunk/${project.artifactId}/</developerConnection>
		<url>${svn.server.url}/trunk/${project.artifactId}</url>
	</scm>
	
	
	<!-- Configuration below is based on the com.sourcesense.alfresco:maven-alfresco-extension-archetype:3.9.0 artifact -->
	<!--
		Licensed to the Apache Software Foundation (ASF) under one or more
		contributor license agreements. See the NOTICE file distributed with
		this work for additional information regarding copyright ownership.
		The ASF licenses this file to You under the Apache License, Version
		2.0 (the "License"); you may not use this file except in compliance
		with the License. You may obtain a copy of the License at
		http://www.apache.org/licenses/LICENSE-2.0 Unless required by
		applicable law or agreed to in writing, software distributed under the
		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the License for
		the specific language governing permissions and limitations under the
		License.
	-->
	<properties>
        <!-- Alfresco version/edition selection, inherited by default, but can be overriden -->
        <!--  
        <alfresco.version>4.0.b</alfresco.version>
        <alfresco.edition>community</alfresco.edition>
        -->
        
        <!--
        	@deprecated 
        Build environment ==> src/main/properties/<env>/alfresco-global.properties is loaded -->
        <env>local</env>
        <!-- Webapp packaged name -->
        <webapp.name>alfresco</webapp.name>
        <!--
            | Empty log dir creates file alfresco.log in the current root folder.
            | You can also specify a meaningful log directory for the server (add a trailing slash, e.g. '/var/log/alfresco/' ) 
            | Jetty embedded run logs by default in ${project.basedir}/alfresco.log
            -->
        <log.dir></log.dir>
        <!-- 
         | By default the src/main/properties/local/alfresco-global.properties uses the property "alfresco.data.location" to specify where 
         | alf_data gets created. For env=local you can use this shortcut property below, which gets filtered in the alfresco-global.properties file
         | DEFAULT: alf_data_jetty relativel to run dir 
         -->
        <!-- H2 configuration: To be fixed <alfresco.db.url>jdbc:h2:${alfresco.data.location}/h2_data/${alfresco.db.name}</alfresco.db.url> -->
        
        <!-- Override this in your settings.xml with a by default enabled profile. -->
        <cargo.installed.tomcat.containerId>tomcat6x</cargo.installed.tomcat.containerId>
        <cargo.remote.tomcat.containerId>tomcat6x</cargo.remote.tomcat.containerId>
		
        
        <!-- DEPRECATED -->
        <desktop.action.package>org.alfresco.filesys.repo.desk</desktop.action.package>

        <!--
            These redundancies are due to filtering issues of Maven. See here
            http://maven.apache.org/plugins/maven-site-plugin/usage.html
        -->
        <site_pom_description>${project.description}</site_pom_description>
        <site_pom_url>${project.organization.url}</site_pom_url>
        <site_pom_groupId>${project.groupId}</site_pom_groupId>
        <site_pom_artifactId>${project.artifactId}</site_pom_artifactId>
        <site_pom_version>${project.version}</site_pom_version>
        <site_tags_url>${svn.tags.url}</site_tags_url>
        <site_site_url>${site.url}</site_site_url>
    </properties>

    
	<!-- Alfresco dependencies -->
	<dependencies>
        <!--
            | Alfresco Dependencies 
            | NB: These files are not publicly available. Please vote for Alfresco to release them if you care :) 
            | Jboss alfresco build (e.g. no log4j.properties and fix for myFaces)
            -->
		<dependency>
			<groupId>org.alfresco</groupId>
			<artifactId>alfresco</artifactId>
			<version>${alfresco.version}</version>
			<type>war</type>
			<scope>provided</scope>
			<classifier>${alfresco.edition}</classifier>
		</dependency>
		<!--
			All provided libs (as contained in the war dependency) but useful for
			development (e.g. IDE configuration)
		-->
		<dependency>
			<groupId>org.alfresco</groupId>
			<artifactId>alfresco-core</artifactId>
			<version>${alfresco.version}</version>
			<scope>provided</scope>
			<classifier>${alfresco.edition}</classifier>
		</dependency>
		<dependency>
			<groupId>org.alfresco</groupId>
			<artifactId>alfresco-datamodel</artifactId>
			<version>${alfresco.version}</version>
			<scope>provided</scope>
			<classifier>${alfresco.edition}</classifier>
		</dependency>		
		<dependency>
			<groupId>org.alfresco</groupId>
			<artifactId>alfresco-remote-api</artifactId>
			<version>${alfresco.version}</version>
			<scope>provided</scope>
			<classifier>${alfresco.edition}</classifier>
		</dependency>
		<dependency>
			<groupId>org.alfresco</groupId>
			<artifactId>alfresco-repository</artifactId>
			<version>${alfresco.version}</version>
			<scope>provided</scope>
			<classifier>${alfresco.edition}</classifier>
		</dependency>
		<dependency>
			<groupId>org.alfresco</groupId>
			<artifactId>alfresco-web-client</artifactId>
			<version>${alfresco.version}</version>
			<scope>provided</scope>
			<classifier>${alfresco.edition}</classifier>
		</dependency>
		<!-- TODO: verify that these are all the Alfresco libraries (maybe add deployment, enterprise-repo, jlan, mbeans) -->

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>${webapp.name}</finalName>
		<!--
			Default profile to build as an Alfresco extension - resources are
			copied into classpath
		-->
		<resources>

			<!-- only filter *.properties and *.xml from the resources directory -->
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.xml</include>
				</includes>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<excludes>
					<exclude>**/*.properties</exclude>
					<exclude>**/*.xml</exclude>
				</excludes>
				<filtering>false</filtering>
			</resource>			
		</resources>

		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<configuration>
					<!-- useEditMode>true</useEditMode> -->
					<dryRun>true</dryRun>
					<preparationGoals>clean package</preparationGoals>
					<goals>install deploy cargo:undeploy cargo:deploy
						site:deploy</goals>
					<!-- <tagBase>${svn.tags.url}</tagBase> -->
				</configuration>
			</plugin>
			<!--
				Adds support for books PDF and RTF generation for single sourced
				documentation
			-->
			<plugin>
				<groupId>org.apache.maven.doxia</groupId>
				<artifactId>doxia-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>pre-site</phase>
						<goals>
							<goal>render-books</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!--
						| Target books dir: within the site so it can be linked and
						deployed | TODO: Use ${project.target.dir} or so similar property
						instead of | hard wiring 'target'
					-->
					<generatedDocs>target/site/books</generatedDocs>
					<books>
						<book>
							<directory>src/site</directory>
							<descriptor>src/books/manual.xml</descriptor>
							<formats>
								<format>
									<id>xdoc</id>
								</format>
								<format>
									<id>pdf</id>
								</format>
								<format>
									<id>rtf</id>
								</format>
							</formats>
						</book>
					</books>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<reporting>
		<plugins>
			<!-- Targeting 1.6 -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
                <version>2.9</version>
			</plugin>
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
                <version>2.8</version>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jxr-maven-plugin</artifactId>
                <version>2.0-beta-1</version>
			</plugin>
			<plugin>
				<artifactId>maven-clover-plugin</artifactId>
                <version>2.4</version>
			</plugin>
			<!--
				Enable this plugin only after setting SCM connection, otherwise mvn
				site will fail <plugin> <groupId>org.codehaus.mojo</groupId>
				<artifactId>changelog-maven-plugin</artifactId> </plugin>
			-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>taglist-maven-plugin</artifactId>
                <version>2.4</version>
			</plugin>
		</plugins>
	</reporting>

	<!-- 
		| Build Profiles
	-->
	<profiles>
	
		<!-- profile that is active when a src directory exists, this skips execution for the pom, while it is active for children -->
		<profile>
			<id>non-pom</id>
			<activation>
				<file>
					<exists>src</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<!-- unpack the AMP's into the webapp directory -->
							<execution>
								<id>unpack-amp-dependencies</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>unpack-dependencies</goal>
								</goals>
								<configuration>
									<includeTypes>amp</includeTypes>
									<outputDirectory>${project.build.directory}/${webapp.name}</outputDirectory>
									<excludes>META*</excludes>
								</configuration>
							</execution>
							<!-- copy the alfresco war dependency into the build directory
								need to use the copy instead of copy-dependencies to be able to rename the output file -->
							<execution>
								<id>copy-alfresco-war</id>
								<goals>
									<goal>copy</goal>
								</goals>
								<phase>package</phase>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.alfresco</groupId>
											<artifactId>alfresco</artifactId>
											<version>${alfresco.version}</version>
											<type>war</type>
											<classifier>${alfresco.edition}</classifier>
											<destFileName>${webapp.name}.war</destFileName>
										</artifactItem>
									</artifactItems>
									<outputDirectory>${project.build.directory}/</outputDirectory>
								</configuration>
							</execution>				
						</executions>
						<dependencies>
							<!--
								This is required to be re-defined explicitly at plugin level as
								otherwise the 'amp' extension unArchiver won't be available to the
								maven-dependency-plugin
							-->
							<dependency>
								<groupId>org.alfresco.maven.plugin</groupId>
								<artifactId>maven-amp-plugin</artifactId>
								<version>${maven-amp-plugin.version}</version>
							</dependency>
						</dependencies>
					</plugin>
		
					<!-- create the exploded web app to use as source for copying into the Alfresco webapp WAR -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<executions>
							<execution>
								<id>default-war</id>
								<phase>package</phase>
								<goals>
									<goal>exploded</goal>
								</goals>
								<configuration>
									<!-- override the war name to prevent overwriting the Alfresco WAR file -->
									<warName>${webapp.name}.custom</warName>
									<failOnMissingWebXml>false</failOnMissingWebXml>
									<webResources>
										<resource>
											<directory>${project.basedir}/src/main/webapp</directory>
											<includes>
												<include>**/*.jsp</include>
											</includes>
											<filtering>true</filtering>
										</resource>
									</webResources>
								</configuration>
							</execution>
						</executions>
					</plugin>  			 
					
					<!-- copy the generated webapp WAR (with the AMP's already packaged in there) into the Alfresco webapp WAR -->
					<plugin>
						<groupId>com.goldin.plugins</groupId>
						<artifactId>maven-copy-plugin</artifactId>
						<version>0.2.3.8-beta-6</version>
						<executions>
							<execution>
					            <id>update-war</id>
					            <phase>package</phase>
					            <goals>
					                <goal>copy</goal>
					            </goals>
								<configuration>
									<runIf>{{ new File( project.build.directory, 'alfresco' ).isDirectory() }}</runIf>
									<resource>
									    <targetPath>${project.build.directory}/alfresco.war</targetPath>
									    <directory>${project.build.directory}/alfresco</directory>
									    <pack>true</pack>
									    <update>true</update>
									</resource>
								</configuration>
							</execution>
						</executions>
					</plugin>				
				</plugins>
			</build>
			
		</profile>
	
	
		<!--
			| Profile to automatically restore export files committed under |
			"tools/export/<restoreVersion>/export_*.[acp,xml]" and the
			restore-context.xml. | Gets automatically activated specifiying a
			value for the property | restoreVersion which maps to the name of the
			folder. | NB: In order this to work you *MUST* export your full repo
			with "export" package name
		-->
		<profile>
			<id>restore</id>
			<activation>
				<property>
					<name>restoreVersion</name>
				</property>
			</activation>
			<build>
				<defaultGoal>package</defaultGoal>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<includes>
							<include>**/restore-*.xml</include>
						</includes>
					</resource>
					<resource>
						<directory>tools/export/${restoreVersion}</directory>
						<includes>
							<include>**</include>
						</includes>
						<targetPath>alfresco/extension/restore</targetPath>
					</resource>
				</resources>
			</build>
		</profile>
		<!--
			Profile for deploying (only locally , due to
			http://jira.codehaus.org/browse/CARGO-416) on jboss. | | FIXME: Add
			<dependencies> override in order to have jboss specific
			alfresco-*-jboss.war (e.g no log4j.properties and log4j jar) | being
			substituted as a depenendency, and avoid log4j classCasts |
		-->
		<profile>
			<id>jboss</id>
			<!--
				| By default the src/main/properties/local/alfresco-global.properties
				uses the property "alfresco.data.location" to specify where |
				alf_data gets created and "alfresco.db.name" for the database name.
				| For local jboss deployment default creation dir (alf_data) is
				under appserver $JBOSS_HOME/bin directory (as location is specified
				relatively to | run dir) | | Empty log dir creates file alfresco.log
				in appserver default dir. You can also specify a meaningful log
				directory for the server | (add a trailing slash, e.g.
				'/var/log/alfresco/' ) | | NB: Remember to grant appropriate
				permissions on database you specify here by running the script found
				in tools/mysql/[jetty/tomcat/jboss] | sql scripts (after editing
				them), or run those you find in
				target/classes/tools/[db_remove,db_setup].sql which are already
				filtered according to | ' alfresco.db.name ' property. |
			-->
			<properties>
				<alfresco.data.location>./alf_data</alfresco.data.location>
				<alfresco.db.name>alf_jboss</alfresco.db.name>
				<log.dir></log.dir>
			</properties>
			<build>
				<defaultGoal>cargo:deploy</defaultGoal>
				<resources>
					<resource>
						<directory>src/main/resources</directory>
						<includes>
							<include></include>
						</includes>
						<filtering>true</filtering>
					</resource>
				</resources>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<containerId>jboss4x</containerId>
								<type>remote</type>
							</container>
							<configuration>
								<type>runtime</type>
								<properties>
									<cargo.servlet.port>8080</cargo.servlet.port>
								</properties>
							</configuration>
							<deployer>
								<type>remote</type>
								<deployables>
									<deployable>
										<groupId>${project.groupId}</groupId>
										<artifactId>${project.artifactId}</artifactId>
										<type>war</type>
									</deployable>
								</deployables>
							</deployer>
						</configuration>
					</plugin>
					<!-- log4j.properties is excluded from source and dependencies -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<configuration>
							<archiveClasses>false</archiveClasses>
							<webappDirectory>target/${webapp.name}</webappDirectory>
							<dependentWarExcludes>**/log4j.properties,**/lib/log4j*.jar,log4j.properties</dependentWarExcludes>
							<warSourceExcludes>**/log4j.properties,WEB-INF/classes/tools</warSourceExcludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- 
			| Profile for deploying on tomcat 5.x
			|
			|
		-->
		<profile>
			<id>tomcat-deploy</id>
			<!-- deploy with `mvn package cargo:deploy -Ptomcat`
				Or use undeploy or redeploy
			 -->
			<build>
				<defaultGoal>clean package cargo:deploy</defaultGoal>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<!-- no execution required, this plugin is triggered explicitely with a profile -->
						<configuration>
							<container>
								<containerId>${cargo.remote.tomcat.containerId}</containerId>
								<type>remote</type>
							</container>
							<configuration>
								<type>runtime</type>
								<properties>
									<cargo.server.settings>tomcat-remote</cargo.server.settings>
								</properties>
							</configuration>
							<deployer>
								<type>remote</type>
								<deployables>
									<deployable>
										<artifactId>${project.artifactId}</artifactId>
										<type>war</type>
										<properties>
											<context>/${webapp.name}</context>
										</properties>
									</deployable>
								</deployables>
							</deployer>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		
		<profile>
			<id>tomcat-inject</id>
			<build>
				<!-- if using the profile without any goals on the command line, run this goal -->
				<defaultGoal>clean prepare-package cargo:deploy</defaultGoal>
				<plugins>
					<!-- 
						The Maven2 plugin has two <configuration> elements:
						The first (outer) one is the plugin's configuration
						The second (inner) one is the container's configuration
						The <deployables> element should be in the inner <configuration> element.					
					 -->
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<!-- no execution required, this plugin is triggered explicitely with a profile -->
						<configuration>
							<container>
								<containerId>${cargo.installed.tomcat.containerId}</containerId>
								<type>installed</type>
							</container>
							<configuration>
								<type>existing</type>
								<home>${CATALINA_HOME}</home>
								<properties>
									<cargo.server.settings>tomcat-installed</cargo.server.settings>
								</properties>
							</configuration>
							<deployer>
								<deployables>
									<deployable>
										<artifactId>${project.artifactId}</artifactId>
										<type>war</type>
										<!-- overwrite location to point to a directory to do a filecopy hot deploy -->
										<location>${project.build.directory}/${webapp.name}/</location>
										<properties>
											<context>/${webapp.name}</context>
										</properties>
									</deployable>
								</deployables>
							</deployer>
						</configuration>
					</plugin>
					<!-- explicitely call the exploded goal to create the webapp directory in the target folder, we're only running until prepare-package -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<executions>
							<execution>
								<id>prepare-war</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>exploded</goal>
								</goals>
							</execution>
						</executions>
					</plugin>					
				</plugins>
			</build>
		</profile>		
		
		<!-- -Pinitialize : boostraps the db (only to be used the 1st run)  -->
		<profile>
			<id>initialize</id>
			<build>
				<plugins>
					<!-- Cleans the alf_data folder and logs-->
					<plugin>
						<artifactId>maven-clean-plugin</artifactId>
						<executions>
							<execution>
							  <id>clean-alf-data</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>clean</goal>
								</goals>
								<configuration>
									<filesets>
										<fileset>
											<directory>${alfresco.data.location}</directory>
											<includes>
												<include>**/*</include>
											</includes>
										</fileset>
										<fileset>
											<directory>.</directory>
											<includes>
												<include>**/*.log</include>
												<include>*.log</include>
											</includes>
										</fileset>
									</filesets>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		
		<profile>
			<id>jetty-embedded</id>
			<properties>
		        <!-- For embedded DB is also configurable here. Of course keep in sync these two values otherwise you'll get integrity errors. Default Mysql-->
		        <alfresco.data.location>./alf_data_jetty</alfresco.data.location>
		        <alfresco.db.servername>localhost</alfresco.db.servername>
		        <alfresco.db.portnumber>5432</alfresco.db.portnumber>
		        <alfresco.db.name>alf_jetty</alfresco.db.name>
		        <alfresco.db.username>alfresco</alfresco.db.username>
		        <alfresco.db.password>alfresco</alfresco.db.password>
		        <alfresco.db.url>jdbc:postgresql://${alfresco.db.servername}:${alfresco.db.portnumber}/${alfresco.db.name}</alfresco.db.url>
		        <alfresco.db.driver>org.postgresql.Driver</alfresco.db.driver>
		        <alfresco.db.datasource.class>org.postgresql.jdbc4.Jdbc3PoolingDataSource</alfresco.db.datasource.class>
			</properties>
			<build>
				<!-- if using the profile without any goals on the command line, run this goal -->
				<defaultGoal>clean prepare-package jetty:run</defaultGoal>
                <resources>
					  <!--
		                | Include application properties file in classpath: this allows Spring contexts to have customization properties available at 
		                | classpath:alfresco-global.properties
		                -->
					<resource>
						<directory>src/main/properties/embedded</directory>
						<includes>
							<include>alfresco-global.properties</include>
                            <include>jetty-env.xml</include>
						</includes>
						<filtering>true</filtering>
					</resource>
                </resources>
				<plugins>
                    <plugin>
                        <groupId>org.mortbay.jetty</groupId>
						<artifactId>maven-jetty-plugin</artifactId>
						<!-- no execution required, this plugin is triggered explicitely with a profile -->
						<configuration>
							<jettyEnvXml>${project.build.directory}/classes/jetty-env.xml</jettyEnvXml>
							<webAppConfig>
								<contextPath>/${webapp.name}</contextPath>
								<baseResource implementation="org.mortbay.resource.ResourceCollection">
									<resourcesAsCSV>src/main/webapp,${project.build.directory}/${webapp.name}</resourcesAsCSV>
								</baseResource>
							</webAppConfig>					
							<reload>manual</reload>				
							<connectors>
								<connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
									<port>8080</port>
									<maxIdleTime>60000</maxIdleTime>
								</connector>
							</connectors>
						</configuration>
					</plugin>
					<!-- explicitely call the exploded goal to create the webapp directory in the target folder, we're only running until prepare-package -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<executions>
							<execution>
								<id>prepare-war</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>exploded</goal>
								</goals>
							</execution>
						</executions>
					</plugin>						
				</plugins>
			</build>
            <dependencies>
				<dependency>
					<groupId>postgresql</groupId>
					<artifactId>postgresql</artifactId>
					<version>9.0-801.jdbc4</version>
				</dependency>
            </dependencies>
		</profile>
		
	</profiles>	

</project>