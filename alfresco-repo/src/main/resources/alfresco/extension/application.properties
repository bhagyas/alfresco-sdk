# RUN TIME PROPERTIES
# -------------------
# This file can be used both for build time filtering and runtime Alfresco properties to be deployed with the Alfresco webapp and 
# automatically read by a custom Spring PropertyPlaceholder configurer.

# POM Filtered properties
# The following group op properties can be configured by the pom when env="local" (as this application.properties file is matched).


# Sample custom content and index data location
# This will create alf_data Relative to appserver run folder
dir.root=${alfresco.dir.root}
# database connection properties
# MySQL connection (This is default and requires mysql-connector-java-5.0.3-bin.jar, which ships with the Alfresco server)
db.name=${alfresco.db.name}
db.driver=${alfresco.db.driver}
db.url=${alfresco.db.url}
db.username=${alfresco.db.username}
db.password=${alfresco.db.password}
db.pool.initial=10
db.pool.max=100
# Filtered from pom based on features selected
hibernate.dialect=${alfresco.hibernate.dialect}


# Allowed values are: NONE, AUTO, FULL
index.recovery.mode=NONE

swf.exe=/usr/bin/pdf2swf
img.exe=/usr/bin/convert
ooo.exe=soffice
ooo.user=${dir.root}/oouser

# Fail or not when there are node integrity checker errors
integrity.failOnError=true

# Property to control whether schema updates are performed automatically.
# Updates must be enabled during upgrades as, apart from the static upgrade scripts,
# there are also auto-generated update scripts that will need to be executed.  After
# upgrading to a new version, this can be disabled.
#db.schema.update=true


# File servers related properties 
# For local builds we disable CIFS and FTP. Edit the following property to reenable them
smb.server.enabled=false
smb.server.name=ALFRESCO_SHARE
smb.server.domain=localhost
smb.server.bindto=127.0.0.1
smb.tcpip.port=8445
netbios.session.port=8139
netbios.name.port=8137
netbios.datagram.port=8138
ftp.server.enabled=false
ftp.port=8021
ftp.authenticator=alfresco


# If users correctly authenticated in LDAP should be autocreated in Alfresco 
personService.autoCreate=true
# Wheter users can be created on the fly upon successful external (e.g. LDAP) authentication. Useful to avoid user synchronization in case just uid and pwd are needed for a user
server.transaction.allow-writes=true
# Wheter user names are case sensitive
user.name.caseSensitive=true
# Wheter the synchronization process has to process duplicated users (e.g. synced users and users coming from the sync)
personService.processDuplicates=true
# Which action to take when processing duplicates. One of:  
# LEAVE: keeps the original entry,
# SPLIT: creates another user with a different uid
# DELETE: updated the entry with the new one
personService.duplicateMode=DELETE
#Â Which of the users (in case of SPLIT duplicates policy) should be considered valid
personService.lastIsBest=true
# Wheter auto created users should be considered when processing duplicates
personService.includeAutoCreated=true

# This properties file is used to configure LDAP authentication
# NB: The following LDAP related properties are read only in case -Denteprise mvn build property is specified
# Wheter to allow silent deletion of users in the Alfresco UI (note: users will be then resynced in the next synchronization)
ldap.authentication.allowDeleteUser=true
# LDAP JNDI provider
ldap.authentication.provider=com.sun.jndi.ldap.LdapCtxFactory
#Â Url and protocol for LDAP server to carry authentication against
ldap.authentication.url=ldap://localhost:10389
#Â can be (simple, ssl)
ldap.authentication.protcol=simple
# Credentials with full access to the directoty used
ldap.authentication.adminUser=uid=admin,ou=system
ldap.authentication.adminPassword=secret
# path where to look for users inside LDAP. Available parameters: 1. username 2. ou=<tenant>
ldap.authentication.username.format=uid=%s,ou=users,ou=system
#Â Wheter to allow unauthenticated guest a read only login
ldap.authentication.guestLogin.allowed=false
# The query to find the people to import
ldap.synchronisation.personQuery=(objectclass=inetOrgPerson)
# The search base of the query to find people to import
ldap.synchronisation.personSearchBase=ou=users,ou=system
# The attribute name on people objects found in LDAP to use as the uid in Alfresco
ldap.synchronisation.personType=inetOrgPerson
#If true, clear all existing people before import, if false update/add people from the xml
ldap.synchronisation.import.people.clearAllChildren=false
# The attribute in LDAP on group objects that defines the DN for its members
ldap.synchronisation.userIdAttributeName=uid
# The attribute on person objects in LDAP to map to the first name property in Alfresco
ldap.synchronisation.userFirstNameAttributeName=cn
# The attribute on person objects in LDAP to map to the last name property in Alfresco
ldap.synchronisation.userLastNameAttributeName=sn
# The attribute on person objects in LDAP to map to the email property in Alfresco
ldap.synchronisation.userEmailAttributeName=mail
# The attribute on person objects in LDAP to map to the organizational id  property in Alfresco
# Not retrieved ATM, please add something there.
ldap.synchronisation.userOrganizationalIdAttributeName=maildomain
# The default home folder provider to use for people created via LDAP import
ldap.synchronisation.defaultHomeFolderProvider=userHomesHomeFolderProvider
# The DN search base where to look up for groups to sync
ldap.synchronisation.groupSearchBase=ou=groups,ou=system
# The query to find group objects
ldap.synchronisation.groupQuery=(!(objectclass=organizationalUnit))
# The attribute on LDAP group objects to map to the gid property in Alfrecso
ldap.synchronisation.groupIdAttributeName=cn
# The group type in LDAP
ldap.synchronisation.groupType=organizationalUnit
# The person type in LDAP
ldap.synchronisation.groupMemberAttributeName=member
# The cron expression defining when people imports should take place (e.g. every 10 minutes)
ldap.synchronisation.import.person.cron=0 0/10 * * * ?
# The cron expression defining when group imports should take place (e.g. every 10 minutes)
ldap.synchronisation.import.group.cron=30 0/10 * * * ?
# Should all groups be cleared out at import time?
# - this is safe as groups are not used in Alfresco for other things (unlike person objects which you should never clear out during an import)
# - setting this to true means old group definitions will be tidied up.
ldap.synchronisation.import.group.clearAllChildren=false
